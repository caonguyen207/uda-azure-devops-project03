name: Azure Pipelines

trigger:
  - main

pool: mypool

variables:
  System.Debug: true
  python.version: "3.7.6"
  azureServiceConnectionId: "myServiceConnection"
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: "test"
  poolName: mypool
  webAppName: myApplication-AppService

stages:
  - stage: Build
    jobs:
      - job: BuildInfrastructure
        pool:
          name: $(poolName)
        steps:
          - task: TerraformInstaller@0
            displayName: "Terrafom installation"
            inputs:
              terraformVersion: "1.7.4"

          - task: CmdLine@2
            inputs:
              script: |
                sudo apt get update
                sudo apt-get install unzip -y

          - task: TerraformCLI@0
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "tfstate242649634"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: TerraformCLI@1
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"

          - task: TerraformCLI@0
            displayName: Terraform plan
            inputs:
              provider: "azurerm"
              command: "plan"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
              publishPlanResults: "my-plan"
              commandOptions: "-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"

          - task: TerraformCLI@1
            displayName: Terraform apply
            condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

      - job: Testing
        dependsOn: BuildInfrastructure
        condition: succeeded()
        pool:
          name: $(poolName)
        steps:
          - task: NodeTool@0
            displayName: Install NodeJS
            inputs:
              versionSpec: "20.11.1"
          - task: CmdLine@2
            displayName: Install NPM
            inputs:
              script: "sudo apt install npm -y"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: "sudo npm install -g newman"
              workingDirectory: "$(System.DefaultWorkingDirectory)"
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              script: |
                newman run DataValidationTestSuite.json -e Environment.json --reporters cli,junit --reporter-junit-export data-validation-test-report.xml
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: |
                newman run RegressionTestSuite.json -e Environment.json --reporters cli,junit --reporter-junit-export regresstion-test-report.xml
              workingDirectory: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/*report.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              mergeTestResults: true
              testRunTitle: "Run Test Report"

          - task: ArchiveFiles@2
            displayName: "Archive UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip"
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
            displayName: "Upload Package"
            artifact: drop-uitests

          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: "Upload Package"
            artifact: drop-fakerestapi

          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: "Upload Package"
            artifact: drop-perftests

  - stage: Deploy
    jobs:
      - deployment: FakeRestAPI
        pool: mypool
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "$(azureServiceConnectionId)"
                    appName: "$(webAppName)"
                    appType: webApp
                    package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

                - task: CmdLine@2
                  inputs:
                    script: |
                      wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz"
                      tar -xvzf apache-jmeter-5.4.1.tgz
                      tree 
                      unzip -o $(Build.BuildId)-perftests.zip
                      ./apache-jmeter-5.2.1/bin/jmeter -n -t perftests.jmx -j jmeter.log -f
                      # cat jmeter.log
                    workingDirectory: $(Pipeline.Workspace)/drop-perftests

      - deployment: VMDeploy
        dependsOn: FakeRestAPI
        condition: succeeded()
        displayName: Selenium Tests
        environment:
          name: $(environmentName)
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests
                - task: Bash@3
                  displayName: Install required packages for Selenium running
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash
                      sudo apt-get update -y
                      sudo apt-get upgrade -y
                      sudo apt-get install python3-pip -y
                      sudo apt-get install unzip -y
                      sudo apt-get install zip -y
                      sudo apt-get install -y chromium-browser
                - bash: |
                    unzip -o $(Build.BuildId)-uitests.zip
                    pip install -r requirements.txt
                    chmod +x chromedriver
                    export PATH=$PATH:/home/azureuser/driver
                    echo "Starting Selenium Tests"
                    python3 add_remove_from_cart.py >> selenium.log
                    echo "Completed Selenium Tests. Check selenium.log for results."
                  displayName: "Run Selenium Tests"
                  workingDirectory: $(Pipeline.Workspace)/drop-ui-tests
