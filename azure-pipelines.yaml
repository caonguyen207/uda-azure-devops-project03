name: Azure Pipelines

trigger:
- main

# Otherwise, comment out the line below. 
pool: mypool

variables:
  System.Debug: true
  python.version: '3.7.6'
  azureServiceConnectionId: 'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  poolName: mypool

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    pool:
      name: $(poolName)
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.7.4'
    
    - task: CmdLine@2
      inputs:
        script: |
          sudo apt get update
          sudo apt install unzip

    # Run Terraform Init on the pipeline agent 
    - task: TerraformCLI@0
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate242649634'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformCLI@1
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: TerraformCLI@0
      displayName: Terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        publishPlanResults: 'my-plan'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Run Terraform Apply
    - task: TerraformCLI@1
      displayName: Terraform apply
      condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

  - job: Testing
    dependsOn: BuildInfrastructure
    condition: succeeded()
    pool:
      name: $(poolName)
    steps:
    - task: NodeTool@0
      displayName: Install NodeJS
      inputs:
        versionSpec: '20.11.1'
    - task: CmdLine@2
      displayName: Install NPM
      inputs:
        script: 'sudo apt install npm -y'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        script: |
          newman run test-suite-data.json -e environment.json --reporters cli,junit --reporter-junit-export test-report.xml
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: |
          newman run test-suite-data.json -e environment.json --reporters cli,junit --reporter-junit-export regresstion-test-report.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*report.xml'
        searchFolder:       '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Run Test Report'

    - task: CmdLine@2
      displayName: Install required packages for selenium test
      continueOnError: true
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        script: |
          sudo apt-get update -y
          pip install -r requirements.txt
          sudo apt-get install zip -y
          sudo apt-get install -y chromium-browser
          sudo apt-get install -y chromium-chromedriver
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    # #--------------------------------------------#    
    # # FakeRestAPI - Archive
    # # ToDo: Complete the ArchiveFiles@2 task and publish step 
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi

    # #--------------------------------------------#  
    # # JMeter (Performance) Test Suite - Archive
    # # ToDo: Complete the ArchiveFiles@2 task and publish step 
    # - task: ArchiveFiles@2
    #   displayName: 'Archive PerformanceTestSuite'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/testsuite'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # # JMeter Test Suite - Publish    
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-perftests

# #--------------------------------------------#  
# # DEPLOYMENT STAGE
# #--------------------------------------------#    
#  - stage: Deploy
#   jobs:
#   #--------------------------------------------#  
#   # Deploy FakeRestAPI Web App
#   - deployment: FakeRestAPI
#     pool: mypool    
#     environment: $(environmentName)   # ToDo
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: ''     # ToDo
#               appName: ''               # ToDo
#               appType: webApp
#               package: $(Pipeline.Workspace)/<artifact>/<archiveFile>       # ToDo: Use the published zip artifact. 
#           #--------------------------------------------#    
#           # Run JMeter test suite against the App Service
#           - task: CmdLine@2
#             inputs:
#               script: |
#                 wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
#                 tar -xf apache-jmeter-5.2.1.tgz
#                 unzip -o $(Build.BuildId)-perftests.zip
#                 ./apache-jmeter-5.2.1/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
#                 cat jmeter.log                                                                           # ToDo: Write your commands
#               workingDirectory: $(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
              
#   #--------------------------------------------#  
#   # Selenium | Functional UI Tests
#   # ToDo: 
#   - deployment: VMDeploy
#     displayName: Selenium Tests
#     environment:
#       name: $(environmentName)
#       resourceType: VirtualMachine
#       tags: selenium
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop-ui-tests     # ToDo: Change/provide a name
            
#           - task: Bash@3
#             inputs:
#               targetType: 'inline'
#               script: |           
#                 #! /bin/bash
                
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 pip3 install selenium
#                 cd ~/
#                 DIR=/home/testuser/app
#                 if [ ! -d "$DIR" ]; then
#                     mkdir app
#                 fi
#                 mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
#                 cd app
#                 unzip -o $(Build.BuildId)-uitests.zip
#                 FILE=/home/testuser/app/chromedriver_linux64.zip
#                 if [ ! -f "$FILE" ]; then
#                     LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
#                     wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
#                     unzip -o chromedriver_linux64.zip
#                     sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
#                 fi
#                 export PATH=$PATH:/home/testuser/app
#                 echo "Starting Selenium Tests"
#                 python3 add_remove_from_cart.py >> selenium.log
#                 echo "Completed Selenium Tests. Check selenium.log for results."